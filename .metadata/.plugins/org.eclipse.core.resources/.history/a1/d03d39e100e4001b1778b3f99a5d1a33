package com.bakeshack.api;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Types;

import org.json.JSONArray;
import org.json.JSONObject;

import com.config.ConnectionFactory;
import com.customLog.Logger;
public class ConnectDataBean {
	
	private ConnectionFactory cf = null;
	String dbConnVar = "BAKESHACK";  
	
	public ConnectDataBean() {
		cf = new ConnectionFactory(dbConnVar);
	}
	
	
	// Category master
	
	public int insertUpdateCategory(String category_name,String category_code,String inv_flag, String sale_flag,int category_id, int flag) {
		Connection con = null;
		CallableStatement cs = null;
		ResultSet rs = null;
		
		
		int result=0;
		try {
			
			System.out.println("category name in bean : " + category_name);

			con = cf.getConnection();
			cs = con.prepareCall("{?=call fun_crud_category(?,?,?,?,?,?)}");
			cs.registerOutParameter(1, Types.INTEGER);
			cs.setString(2, category_name);
			cs.setString(3, category_code);
			cs.setString(4, inv_flag);
			cs.setString(5, sale_flag);
			cs.setInt(6, category_id);
			cs.setInt(7, flag);
			
			cs.execute();
			//rs = cs.getResultSet();

			result=cs.getInt(1);
			
		} catch (Exception e) {
			Logger.log(dbConnVar, e);
		} finally {
			try {
				if (con != null) {
					cf.freeConnection(con);
					con.close();
				}
				if (cs != null) {
					cs.close();
				}
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e1) {
				Logger.log(dbConnVar, e1);
			}
		}

		return result;
	}

	public JSONArray getCategoryDetails() {
		Connection con = null;
		CallableStatement cs = null;
		ResultSet rs = null;
		
		JSONArray jarr =null;
		JSONObject finaljson = null;
		try {
			jarr= new JSONArray();
			
			con = cf.getConnection();
			cs = con.prepareCall("{?=call fun_retrieve_category_details(?)}");
			cs.registerOutParameter(1, Types.OTHER);
			cs.setObject(2, rs);
			
			
		 	con.setAutoCommit(false); // without this the Result set is not returning
		 	cs.execute();
		 	rs =  (ResultSet) cs.getObject(1);
		 				
			while (rs.next()) {
				JSONObject resultjson = new JSONObject();
				
				resultjson.put("category_id",  rs.getString(1));
				resultjson.put("category_name",  rs.getString(2));
				resultjson.put("category_code", rs.getString(3));
				resultjson.put("inv_flag",  rs.getString(4));
				resultjson.put("sale_flag", rs.getString(5));
												
				jarr.put(resultjson);
			}	 
			
			finaljson = new JSONObject();
			
			finaljson.put("data", jarr);
			
		} catch (Exception e) {
			Logger.log(dbConnVar, e);
		} finally {
			try {
				if (con != null) {
					con.close();
				}
				if (cs != null) {
					cs.close();
				}
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e1) {
				Logger.log(dbConnVar, e1);
			}
		}

		return jarr;
	}
//Unit master
	
	public int insertUpdateUnit(String unit_desc,String unit_code,int unit_id, int flag) {
		Connection con = null;
		CallableStatement cs = null;
		ResultSet rs = null;
		
		
		int result=0;
		try {
			
			System.out.println("Unit desc in bean : " + unit_desc);

			con = cf.getConnection();
			cs = con.prepareCall("{?=call fun_crud_unit(?,?,?,?)}");
			cs.registerOutParameter(1, Types.INTEGER);
			cs.setString(2, unit_desc);
			cs.setString(3, unit_code);
			cs.setInt(4, unit_id);
			cs.setInt(5, flag);
			
			cs.execute();
			//rs = cs.getResultSet();

			result=cs.getInt(1);
			
		} catch (Exception e) {
			Logger.log(dbConnVar, e);
		} finally {
			try {
				if (con != null) {
					cf.freeConnection(con);
					con.close();
				}
				if (cs != null) {
					cs.close();
				}
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e1) {
				Logger.log(dbConnVar, e1);
			}
		}

		return result;
	}

	public JSONArray getUnitDetails() {
		Connection con = null;
		CallableStatement cs = null;
		ResultSet rs = null;
		
		JSONArray jarr =null;
		JSONObject finaljson = null;
		try {
			jarr= new JSONArray();
			
			con = cf.getConnection();
			cs = con.prepareCall("{?=call fun_retrieve_unit_details(?)}");
			cs.registerOutParameter(1, Types.OTHER);
			cs.setObject(2, rs);
			
			
		 	con.setAutoCommit(false); // without this the Result set is not returning
		 	cs.execute();
		 	rs =  (ResultSet) cs.getObject(1);
		 				
			while (rs.next()) {
				JSONObject resultjson = new JSONObject();
				
				resultjson.put("unit_id",  rs.getString(1));
				resultjson.put("unit_desc",  rs.getString(2));
				resultjson.put("unit_code", rs.getString(3));
												
				jarr.put(resultjson);
			}	 
			
			finaljson = new JSONObject();
			
			finaljson.put("data", jarr);
			
		} catch (Exception e) {
			Logger.log(dbConnVar, e);
		} finally {
			try {
				if (con != null) {
					con.close();
				}
				if (cs != null) {
					cs.close();
				}
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e1) {
				Logger.log(dbConnVar, e1);
			}
		}

		return jarr;
	}

}