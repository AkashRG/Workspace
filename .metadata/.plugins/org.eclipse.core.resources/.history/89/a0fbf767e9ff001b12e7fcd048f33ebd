package com.bakeshack.api;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Types;

import org.json.JSONArray;
import org.json.JSONObject;

import com.config.ConnectionFactory;
import com.customLog.Logger;
public class ConnectDataBean {
	
	private ConnectionFactory cf = null;
	String dbConnVar = "BAKESHACK";  
	
	public ConnectDataBean() {
		cf = new ConnectionFactory(dbConnVar);
	}
	
	
	// Category master
	
	public int insertUpdateCategory(String category_name,String category_code,String inv_flag, String sale_flag,int category_id, int flag) {
		Connection con = null;
		CallableStatement cs = null;
		ResultSet rs = null;
		
		
		int result=0;
		try {
			
			System.out.println("category name in bean : " + category_name);

			con = cf.getConnection();
			cs = con.prepareCall("{?=call fun_crud_category(?,?,?,?,?,?)}");
			cs.registerOutParameter(1, Types.INTEGER);
			cs.setString(2, category_name);
			cs.setString(3, category_code);
			cs.setString(4, inv_flag);
			cs.setString(5, sale_flag);
			cs.setInt(6, category_id);
			cs.setInt(7, flag);
			
			cs.execute();
			//rs = cs.getResultSet();

			result=cs.getInt(1);
			
		} catch (Exception e) {
			Logger.log(dbConnVar, e);
		} finally {
			try {
				if (con != null) {
					cf.freeConnection(con);
					con.close();
				}
				if (cs != null) {
					cs.close();
				}
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e1) {
				Logger.log(dbConnVar, e1);
			}
		}

		return result;
	}

	public JSONArray getCategoryDetails() {
		Connection con = null;
		CallableStatement cs = null;
		ResultSet rs = null;
		
		JSONArray jarr =null;
		JSONObject finaljson = null;
		try {
			jarr= new JSONArray();
			
			con = cf.getConnection();
			cs = con.prepareCall("{?=call fun_retrieve_category_details(?)}");
			cs.registerOutParameter(1, Types.OTHER);
			cs.setObject(2, rs);
			
			
		 	con.setAutoCommit(false); // without this the Result set is not returning
		 	cs.execute();
		 	rs =  (ResultSet) cs.getObject(1);
		 				
			while (rs.next()) {
				JSONObject resultjson = new JSONObject();
				
				resultjson.put("category_id",  rs.getString(1));
				resultjson.put("category_name",  rs.getString(2));
				resultjson.put("category_code", rs.getString(3));
				resultjson.put("inv_flag",  rs.getString(4));
				resultjson.put("sale_flag", rs.getString(5));
												
				jarr.put(resultjson);
			}	 
			
			finaljson = new JSONObject();
			
			finaljson.put("data", jarr);
			
		} catch (Exception e) {
			Logger.log(dbConnVar, e);
		} finally {
			try {
				if (con != null) {
					con.close();
				}
				if (cs != null) {
					cs.close();
				}
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e1) {
				Logger.log(dbConnVar, e1);
			}
		}

		return jarr;
	}
	
	// Subcategory master
	
		public int insertUpdateSubcategory(String subcategory_name, int category, int subcategory_id, int flag) {
			Connection con = null;
			CallableStatement cs = null;
			ResultSet rs = null;
			
			
			int result=0;
			try {

				con = cf.getConnection();
				cs = con.prepareCall("{?=call fun_crud_subcategory(?,?,?,?)}");
				cs.registerOutParameter(1, Types.INTEGER);
				cs.setString(2, subcategory_name);
				cs.setInt(3, category);
				cs.setInt(4, subcategory_id);
				cs.setInt(5, flag);
				
				cs.execute();
				//rs = cs.getResultSet();

				result=cs.getInt(1);
				
			} catch (Exception e) {
				Logger.log(dbConnVar, e);
			} finally {
				try {
					if (con != null) {
						cf.freeConnection(con);
						con.close();
					}
					if (cs != null) {
						cs.close();
					}
					if (rs != null) {
						rs.close();
					}
				} catch (Exception e1) {
					Logger.log(dbConnVar, e1);
				}
			}

			return result;
		}
		
		

		public JSONArray getSubcategoryDetails() {
			Connection con = null;
			CallableStatement cs = null;
			ResultSet rs = null;
			
			JSONArray jarr =null;
			JSONObject finaljson = null;
			try {
				jarr= new JSONArray();
				
				con = cf.getConnection();
				cs = con.prepareCall("{?=call fun_retrieve_subcategory_details(?)}");
				cs.registerOutParameter(1, Types.OTHER);
				cs.setObject(2, rs);
				
				
			 	con.setAutoCommit(false); // without this the Result set is not returning
			 	cs.execute();
			 	rs =  (ResultSet) cs.getObject(1);
			 				
				while (rs.next()) {
					JSONObject resultjson = new JSONObject();
									
					
					resultjson.put("subcategory_id",  rs.getString(1));
					resultjson.put("subcategory_name", rs.getString(2));
					resultjson.put("category",  rs.getString(3));
				
					jarr.put(resultjson);
				}	 
				
				finaljson = new JSONObject();
				
				finaljson.put("data", jarr);
				
			} catch (Exception e) {
				Logger.log(dbConnVar, e);
			} finally {
				try {
					if (con != null) {
						con.close();
					}
					if (cs != null) {
						cs.close();
					}
					if (rs != null) {
						rs.close();
					}
				} catch (Exception e1) {
					Logger.log(dbConnVar, e1);
				}
			}

			return jarr;
		}
		
//Unit master
	
	public int insertUpdateUnit(String unit_desc,String unit_code,int unit_id, int flag) {
		Connection con = null;
		CallableStatement cs = null;
		ResultSet rs = null;
		
		
		int result=0;
		try {
			
			System.out.println("Unit desc in bean : " + unit_desc);

			con = cf.getConnection();
			cs = con.prepareCall("{?=call fun_crud_unit(?,?,?,?)}");
			cs.registerOutParameter(1, Types.INTEGER);
			cs.setString(2, unit_desc);
			cs.setString(3, unit_code);
			cs.setInt(4, unit_id);
			cs.setInt(5, flag);
			
			cs.execute();
			//rs = cs.getResultSet();

			result=cs.getInt(1);
			
		} catch (Exception e) {
			Logger.log(dbConnVar, e);
		} finally {
			try {
				if (con != null) {
					cf.freeConnection(con);
					con.close();
				}
				if (cs != null) {
					cs.close();
				}
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e1) {
				Logger.log(dbConnVar, e1);
			}
		}

		return result;
	}

	public JSONArray getUnitDetails() {
		Connection con = null;
		CallableStatement cs = null;
		ResultSet rs = null;
		
		JSONArray jarr =null;
		JSONObject finaljson = null;
		try {
			jarr= new JSONArray();
			
			con = cf.getConnection();
			cs = con.prepareCall("{?=call fun_retrieve_unit_details(?)}");
			cs.registerOutParameter(1, Types.OTHER);
			cs.setObject(2, rs);
			
			
		 	con.setAutoCommit(false); // without this the Result set is not returning
		 	cs.execute();
		 	rs =  (ResultSet) cs.getObject(1);
		 				
			while (rs.next()) {
				JSONObject resultjson = new JSONObject();
				
				resultjson.put("unit_id",  rs.getString(1));
				resultjson.put("unit_desc",  rs.getString(2));
				resultjson.put("unit_code", rs.getString(3));
												
				jarr.put(resultjson);
			}	 
			
			finaljson = new JSONObject();
			
			finaljson.put("data", jarr);
			
		} catch (Exception e) {
			Logger.log(dbConnVar, e);
		} finally {
			try {
				if (con != null) {
					con.close();
				}
				if (cs != null) {
					cs.close();
				}
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e1) {
				Logger.log(dbConnVar, e1);
			}
		}

		return jarr;
	}
	
//Product Master

	public int insertUpdateProduct(String product_name,String product_code,int subcategory, String product_desc,String selling_price,int unit,int product_id, int flag) {
		Connection con = null;
		CallableStatement cs = null;
		ResultSet rs = null;
		
		
		int result=0;
		try {
			
			System.out.println("Product name in bean : " + product_name);

			con = cf.getConnection();
			cs = con.prepareCall("{?=call fun_crud_product(?,?,?,?,?,?,?,?)}");
			cs.registerOutParameter(1, Types.INTEGER);
			cs.setString(2, product_name);
			cs.setString(3,  product_code);
			cs.setInt(4,subcategory);
			cs.setString(5,  product_desc);
			cs.setString(6, selling_price);
			cs.setInt(7, unit);
			cs.setInt(8, product_id);
			cs.setInt(9, flag);
			
			cs.execute();
			//rs = cs.getResultSet();

			result=cs.getInt(1);
			
		} catch (Exception e) {
			Logger.log(dbConnVar, e);
		} finally {
			try {
				if (con != null) {
					cf.freeConnection(con);
					con.close();
				}
				if (cs != null) {
					cs.close();
				}
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e1) {
				Logger.log(dbConnVar, e1);
			}
		}

		return result;
	}

	public JSONArray getProductDetails() {
		Connection con = null;
		CallableStatement cs = null;
		ResultSet rs = null;
		
		JSONArray jarr =null;
		JSONObject finaljson = null;
		try {
			jarr= new JSONArray();
			
			con = cf.getConnection();
			cs = con.prepareCall("{?=call fun_retrieve_product_details(?)}");
			cs.registerOutParameter(1, Types.OTHER);
			cs.setObject(2, rs);
			
			
		 	con.setAutoCommit(false); // without this the Result set is not returning
		 	cs.execute();
		 	rs =  (ResultSet) cs.getObject(1);
		 				
			while (rs.next()) {
				JSONObject resultjson = new JSONObject();
				
				resultjson.put("product_id",  rs.getString(1));
				resultjson.put("product_name",  rs.getString(2));
				resultjson.put("product_code", rs.getString(3));
				resultjson.put("subcategory",  rs.getString(4));
				resultjson.put("product_desc", rs.getString(5));
				resultjson.put("selling_price", rs.getString(6));
				resultjson.put("unit", rs.getString(7));

												
				jarr.put(resultjson);
			}	 
			
			finaljson = new JSONObject();
			
			finaljson.put("data", jarr);
			
		} catch (Exception e) {
			Logger.log(dbConnVar, e);
		} finally {
			try {
				if (con != null) {
					con.close();
				}
				if (cs != null) {
					cs.close();
				}
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e1) {
				Logger.log(dbConnVar, e1);
			}
		}

		return jarr;
	}
	
// Production master
	
			public int insertUpdateProduction(int product_name, String product_qty,String product_date,String expiry_date,String product_req, int production_id, int flag) {
				Connection con = null;
				CallableStatement cs = null;
				ResultSet rs = null;
				
				
				int result=0;
				try {

					con = cf.getConnection();
					cs = con.prepareCall("{?=call fun_crud_production(?,?,?,?,?,?,?)}");
					cs.registerOutParameter(1, Types.INTEGER);
					cs.setInt(2, product_name);
					cs.setString(3, product_qty);
					cs.setString(4, product_date);
					cs.setString(5, expiry_date);
					cs.setString(6, product_req);
					cs.setInt(7,  production_id);
					cs.setInt(8, flag);
					
					cs.execute();
					//rs = cs.getResultSet();

					result=cs.getInt(1);
					
				} catch (Exception e) {
					Logger.log(dbConnVar, e);
				} finally {
					try {
						if (con != null) {
							cf.freeConnection(con);
							con.close();
						}
						if (cs != null) {
							cs.close();
						}
						if (rs != null) {
							rs.close();
						}
					} catch (Exception e1) {
						Logger.log(dbConnVar, e1);
					}
				}

				return result;
			}
			
			

			public JSONArray getProductionDetails() {
				Connection con = null;
				CallableStatement cs = null;
				ResultSet rs = null;
				
				JSONArray jarr =null;
				JSONObject finaljson = null;
				try {
					jarr= new JSONArray();
					
					con = cf.getConnection();
					cs = con.prepareCall("{?=call fun_retrieve_production_details(?)}");
					cs.registerOutParameter(1, Types.OTHER);
					cs.setObject(2, rs);
					
					
				 	con.setAutoCommit(false); // without this the Result set is not returning
				 	cs.execute();
				 	rs =  (ResultSet) cs.getObject(1);
				 				
					while (rs.next()) {
						JSONObject resultjson = new JSONObject();
										
						
						resultjson.put("production_id",  rs.getInt(1));
						resultjson.put("product_name", rs.getString(2));
						resultjson.put("product_qty",  rs.getString(3));
						resultjson.put("product_date",  rs.getString(4));
						resultjson.put("expirt_date",  rs.getString(5));
						resultjson.put("product_req",   rs.getString(6));


					
						jarr.put(resultjson);
					}	 
					
					finaljson = new JSONObject();
					
					finaljson.put("data", jarr);
					
				} catch (Exception e) {
					Logger.log(dbConnVar, e);
				} finally {
					try {
						if (con != null) {
							con.close();
						}
						if (cs != null) {
							cs.close();
						}
						if (rs != null) {
							rs.close();
						}
					} catch (Exception e1) {
						Logger.log(dbConnVar, e1);
					}
				}

				return jarr;
			}

			
			//recipe master
			

			public int insertUpdateRecipe(String recipe_name, String recipe_code,int product,String product_req, int recipe_id, int flag) {
				Connection con = null;
				CallableStatement cs = null;
				ResultSet rs = null;
				
				
				int result=0;
				try {

					con = cf.getConnection();
					cs = con.prepareCall("{?=call fun_crud_recipe(?,?,?,?,?,?)}");
					cs.registerOutParameter(1, Types.INTEGER);
					cs.setString(2, recipe_name);
					cs.setString(3, recipe_code);
					cs.setInt(4, product);
					cs.setString(5, product_req);
					cs.setInt(6,  recipe_id);
					cs.setInt(7, flag);
					
					cs.execute();
					//rs = cs.getResultSet();

					result=cs.getInt(1);
					
				} catch (Exception e) {
					Logger.log(dbConnVar, e);
				} finally {
					try {
						if (con != null) {
							cf.freeConnection(con);
							con.close();
						}
						if (cs != null) {
							cs.close();
						}
						if (rs != null) {
							rs.close();
						}
					} catch (Exception e1) {
						Logger.log(dbConnVar, e1);
					}
				}

				return result;
			}
			
			

			public JSONArray getRecipeDetails() {
				Connection con = null;
				CallableStatement cs = null;
				ResultSet rs = null;
				
				JSONArray jarr =null;
				JSONObject finaljson = null;
				try {
					jarr= new JSONArray();
					
					con = cf.getConnection();
					cs = con.prepareCall("{?=call fun_retrieve_recipe_details(?)}");
					cs.registerOutParameter(1, Types.OTHER);
					cs.setObject(2, rs);
					
					
				 	con.setAutoCommit(false); // without this the Result set is not returning
				 	cs.execute();
				 	rs =  (ResultSet) cs.getObject(1);
				 				
					while (rs.next()) {
						JSONObject resultjson = new JSONObject();
										
						
						resultjson.put("recipe_id",  rs.getInt(1));
						resultjson.put("recipe_name", rs.getString(2));
						resultjson.put("recipe_code",  rs.getString(3));
						resultjson.put("product",  rs.getString(4));
						resultjson.put("product_req",   rs.getString(5));


					
						jarr.put(resultjson);
					}	 
					
					finaljson = new JSONObject();
					
					finaljson.put("data", jarr);
					
				} catch (Exception e) {
					Logger.log(dbConnVar, e);
				} finally {
					try {
						if (con != null) {
							con.close();
						}
						if (cs != null) {
							cs.close();
						}
						if (rs != null) {
							rs.close();
						}
					} catch (Exception e1) {
						Logger.log(dbConnVar, e1);
					}
				}

				return jarr;
			}

//customer master
			

			public int insertUpdateCustomer(String customer_name,String mobile_no, int customer_id, int flag) {
				Connection con = null;
				CallableStatement cs = null;
				ResultSet rs = null;
				
				
				int result=0;
				try {

					con = cf.getConnection();
					cs = con.prepareCall("{?=call fun_crud_customer(?,?,?,?)}");
					cs.registerOutParameter(1, Types.INTEGER);
					cs.setString(2, customer_name);
					cs.setString(3, mobile_no);
					cs.setInt(4,  customer_id);
					cs.setInt(5, flag);
					
					cs.execute();
					//rs = cs.getResultSet();

					result=cs.getInt(1);
					
				} catch (Exception e) {
					Logger.log(dbConnVar, e);
				} finally {
					try {
						if (con != null) {
							cf.freeConnection(con);
							con.close();
						}
						if (cs != null) {
							cs.close();
						}
						if (rs != null) {
							rs.close();
						}
					} catch (Exception e1) {
						Logger.log(dbConnVar, e1);
					}
				}

				return result;
			}
			
			

			public JSONArray getCustomerDetails() {
				Connection con = null;
				CallableStatement cs = null;
				ResultSet rs = null;
				
				JSONArray jarr =null;
				JSONObject finaljson = null;
				try {
					jarr= new JSONArray();
					
					con = cf.getConnection();
					cs = con.prepareCall("{?=call fun_retrieve_customer_details(?)}");
					cs.registerOutParameter(1, Types.OTHER);
					cs.setObject(2, rs);
					
					
				 	con.setAutoCommit(false); // without this the Result set is not returning
				 	cs.execute();
				 	rs =  (ResultSet) cs.getObject(1);
				 				
					while (rs.next()) {
						JSONObject resultjson = new JSONObject();
										
						
						resultjson.put("customer_id",  rs.getInt(1));
						resultjson.put("customer_name", rs.getString(2));
						resultjson.put("mobile_no",  rs.getString(3));
						


					
						jarr.put(resultjson);
					}	 
					
					finaljson = new JSONObject();
					
					finaljson.put("data", jarr);
					
				} catch (Exception e) {
					Logger.log(dbConnVar, e);
				} finally {
					try {
						if (con != null) {
							con.close();
						}
						if (cs != null) {
							cs.close();
						}
						if (rs != null) {
							rs.close();
						}
					} catch (Exception e1) {
						Logger.log(dbConnVar, e1);
					}
				}

				return jarr;
			}
    // Invoice Master
			
			public int insertUpdateInvoice(String invoice_no,String payment_date,String amount,String due,String order_code, int customer_id,int invoice_id, int flag) {
				Connection con = null;
				CallableStatement cs = null;
				ResultSet rs = null;
				
				
				int result=0;
				try {

					con = cf.getConnection();
					cs = con.prepareCall("{?=call fun_crud_invoice_details(?,?,?,?,?,?,?,?)}");
					cs.registerOutParameter(1, Types.INTEGER);
					cs.setString(2, invoice_no);
					cs.setString(3, payment_date);
					cs.setString(4,  amount);
					cs.setString(5,  due);
					cs.setString(6,  order_code);
					cs.setInt(7, customer_id);
					cs.setInt(8, invoice_id);
					cs.setInt(9, flag);
					
					cs.execute();
					//rs = cs.getResultSet();

					result=cs.getInt(1);
					
				} catch (Exception e) {
					Logger.log(dbConnVar, e);
				} finally {
					try {
						if (con != null) {
							cf.freeConnection(con);
							con.close();
						}
						if (cs != null) {
							cs.close();
						}
						if (rs != null) {
							rs.close();
						}
					} catch (Exception e1) {
						Logger.log(dbConnVar, e1);
					}
				}

				return result;
			}
			
			

			public JSONArray getInvoiceDetails() {
				Connection con = null;
				CallableStatement cs = null;
				ResultSet rs = null;
				
				JSONArray jarr =null;
				JSONObject finaljson = null;
				try {
					jarr= new JSONArray();
					
					con = cf.getConnection();
					cs = con.prepareCall("{?=call fun_retrieve_invoice_details(?)}");
					cs.registerOutParameter(1, Types.OTHER);
					cs.setObject(2, rs);
					
					
				 	con.setAutoCommit(false); // without this the Result set is not returning
				 	cs.execute();
				 	rs =  (ResultSet) cs.getObject(1);
				 				
					while (rs.next()) {
						JSONObject resultjson = new JSONObject();
										
						
						resultjson.put("invoice_id",  rs.getInt(1));
						resultjson.put("invoice_no", rs.getString(2));
						resultjson.put("payment_date",  rs.getString(3));
						resultjson.put("amount",  rs.getString(4));
						resultjson.put("due",  rs.getString(5));
						resultjson.put("order_code",  rs.getString(6));
						resultjson.put("customer_id",  rs.getString(7));
						


					
						jarr.put(resultjson);
					}	 
					
					finaljson = new JSONObject();
					
					finaljson.put("data", jarr);
					
				} catch (Exception e) {
					Logger.log(dbConnVar, e);
				} finally {
					try {
						if (con != null) {
							con.close();
						}
						if (cs != null) {
							cs.close();
						}
						if (rs != null) {
							rs.close();
						}
					} catch (Exception e1) {
						Logger.log(dbConnVar, e1);
					}
				}

				return jarr;
			}

			public JSONArray getOrderId() {
				Connection con = null;
				CallableStatement cs = null;
				ResultSet rs = null;
				
				JSONArray jarr =null;
				JSONObject finaljson = null;
				try {
					jarr= new JSONArray();
					
					con = cf.getConnection();
					cs = con.prepareCall("{?=call fun_generate_order_code(?)}");
					cs.registerOutParameter(1, Types.OTHER);
					cs.setObject(2, rs);
					
					
				 	con.setAutoCommit(false); // without this the Result set is not returning
				 	cs.execute();
				 	rs =  (ResultSet) cs.getObject(1);
				 				
					while (rs.next()) {
						JSONObject resultjson = new JSONObject();
										
						
						resultjson.put("order_no",  rs.getInt(1));
					
						jarr.put(resultjson);
					}	 
					
					finaljson = new JSONObject();
					
					finaljson.put("data", jarr);
					
				} catch (Exception e) {
					Logger.log(dbConnVar, e);
				} finally {
					try {
						if (con != null) {
							con.close();
						}
						if (cs != null) {
							cs.close();
						}
						if (rs != null) {
							rs.close();
						}
					} catch (Exception e1) {
						Logger.log(dbConnVar, e1);
					}
				}

				return jarr;
			}
			
			
			//Upi Master

			public int insertUpdateUpi(String upi_name, String handle, int upi_master_id, int flag) {
				Connection con = null;
				CallableStatement cs = null;
				ResultSet rs = null;
				
				
				int result=0;
				try {

					con = cf.getConnection();
					cs = con.prepareCall("{?=call fun_crud_upi_details(?,?,?,?)}");
					cs.registerOutParameter(1, Types.INTEGER);
					cs.setString(2, upi_name);
					cs.setString(3, handle);
					cs.setInt(4, upi_master_id);
					cs.setInt(5, flag);
					
					cs.execute();
					//rs = cs.getResultSet();

					result=cs.getInt(1);
					
				} catch (Exception e) {
					Logger.log(dbConnVar, e);
				} finally {
					try {
						if (con != null) {
							cf.freeConnection(con);
							con.close();
						}
						if (cs != null) {
							cs.close();
						}
						if (rs != null) {
							rs.close();
						}
					} catch (Exception e1) {
						Logger.log(dbConnVar, e1);
					}
				}

				return result;
			}
			
			

			public JSONArray getUpiDetails() {
				Connection con = null;
				CallableStatement cs = null;
				ResultSet rs = null;
				
				JSONArray jarr =null;
				JSONObject finaljson = null;
				try {
					jarr= new JSONArray();
					
					con = cf.getConnection();
					cs = con.prepareCall("{?=call fun_retrieve_upi_details(?)}");
					cs.registerOutParameter(1, Types.OTHER);
					cs.setObject(2, rs);
					
					
				 	con.setAutoCommit(false); // without this the Result set is not returning
				 	cs.execute();
				 	rs =  (ResultSet) cs.getObject(1);
				 				
					while (rs.next()) {
						JSONObject resultjson = new JSONObject();
										
						
						resultjson.put("upi_master_id",  rs.getString(1));
						resultjson.put("upi_name", rs.getString(2));
						resultjson.put("handle",  rs.getString(3));
					
						jarr.put(resultjson);
					}	 
					
					finaljson = new JSONObject();
					
					finaljson.put("data", jarr);
					
				} catch (Exception e) {
					Logger.log(dbConnVar, e);
				} finally {
					try {
						if (con != null) {
							con.close();
						}
						if (cs != null) {
							cs.close();
						}
						if (rs != null) {
							rs.close();
						}
					} catch (Exception e1) {
						Logger.log(dbConnVar, e1);
					}
				}

				return jarr;
			}
			
			
			public String getOrderCode() {
				Connection con = null;
				CallableStatement cs = null;
				ResultSet rs = null;

				String order_code="";

				try {

					con = cf.getConnection();
					cs = con.prepareCall("{?=call fun_generate_order_code()}");
					cs.registerOutParameter(1, Types.VARCHAR);
					

					con.setAutoCommit(false); // without this the Result set is not returning
					cs.execute();
					order_code = cs.getString(1);

					
				} catch (Exception e) {
					Logger.log(dbConnVar, e);
				} finally {
					try {
						if (con != null) {
							con.close();
						}
						if (cs != null) {
							cs.close();
						}
						if (rs != null) {
							rs.close();
						}
					} catch (Exception e1) {
						Logger.log(dbConnVar, e1);
					}
				}

				return order_code;
			}
			
			

	 		
		}